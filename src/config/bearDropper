#
# bearDropper config - https://github.com/robzr/bearDropper
#
# All time values can use BIND time strings, like 1h30m for 1 hour 30 minutes; valid 
# types are (w)eek (d)ay (h)our (m)inutes (s)econds.  Unitless numbers are seconds.
#
config bearDropper
  # mode used if no mode is specified on command line; see bearDropper -h for help.
  	option	defaultMode 		entire

  # failure attempts from a given IP required to trigger a ban
  	option	attemptCount 		5

  # time period during which attemptCount must be exceeded in order to trigger a ban
  	option	attemptPeriod 		30m

  # how long a ban exist once the attempt threshold is exceeded
  	option 	banLength 		10w

  # log level, 0=silent 1=default 2=verbose 3=debug
  	option 	logLevel 		1

  # logger facility/priority - use stdout or stderr to bypass logger (syslog)
  	option	logFacility 		authpriv.notice

  # How often to write to persistent state file. -1 is never, 0 is on program
  # exit, and a time string can be used to specify minimum interval between writes
  # for periodic saving while in follow mode.  Consider flash storage wear & tear
  # when setting this.  Disabled by default, uncomment for daily writes.
  	option	persistentStateWritePeriod	12h

  # used bddbz for compressed or bddb for plaintext state files
  	option	fileStateType		bddb	

  # temporary state file prefix, ".$fileStateType" (.bddb or .bddbz) will be appended
  	option	fileStateTempPrefix 	/tmp/bearDropper

  # persistent state file prefix 
  	option	fileStatePersistPrefix 	/etc/bearDropper

  # IPTables chains to add rules to, syntax is chain:position where
  #   position is (-1 = don't add, 0 = append, 1+ = absolute position)
    list    firewallHookChain       input_wan:1
    list    firewallHookChain       forward_wan:1

  # target used for banned IPs - consider TARPIT/DELUDE
  	option	firewallTarget		drop

  # Log scanning regexs for those who want to extend the pattern matching. These are run in order
  # by "sed -nE". The IP blocked by bearDropper is the first one encountered in the log line, so
  # if the log line you are scanning for has multiple IPs, you can use a s///p regex to strip out
  # earlier undesirable IPs.  Put /d (delete) entries before /p (print) entries.
    list	logRegex 's/[`$"'\\\'']//g'			# strip escape chars
    list	logRegex '/has invalid shell, rejected$/d'	# delete (/d) - use to filter out
    # print (/p) - use to filter in 
    list	logRegex '/^[A-Za-z ]+[0-9: ]+authpriv.warn dropbear\[.+([0-9]+\.){3}[0-9]+/p'
    list	logRegex '/^[A-Za-z ]+[0-9: ]+authpriv.info dropbear\[.+:\ Exit before auth.*/p'
    list  logRegex '/^[A-Za-z ]+[0-9: ]+authpriv.info dropbear\[.+:\ Early exit.*/p'
    list	logRegex '/^[A-Za-z ]+[0-9: ]+daemon.info ocserv\[.+:\ main: rejected connection from.*/p'

  # whitelist entries do not work yet; as a temporary workaround, put in a firewall rule upstream
  #
  #	list	whitelist		10.0.1.7
  #	list	whitelist		10.0.1.0/24
  #	list	whitelist		192.168.1.0/24
